/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export declare namespace Client {
  export type EVMTokenAmountStruct = {
    token: AddressLike;
    amount: BigNumberish;
  };

  export type EVMTokenAmountStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type Any2EVMMessageStruct = {
    messageId: BytesLike;
    sourceChainSelector: BigNumberish;
    sender: BytesLike;
    data: BytesLike;
    destTokenAmounts: Client.EVMTokenAmountStruct[];
  };

  export type Any2EVMMessageStructOutput = [
    messageId: string,
    sourceChainSelector: bigint,
    sender: string,
    data: string,
    destTokenAmounts: Client.EVMTokenAmountStructOutput[]
  ] & {
    messageId: string;
    sourceChainSelector: bigint;
    sender: string;
    data: string;
    destTokenAmounts: Client.EVMTokenAmountStructOutput[];
  };
}

export interface IRouterInterface extends Interface {
  getFunction(
    nameOrSignature: "getOnRamp" | "isOffRamp" | "routeMessage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getOnRamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isOffRamp",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "routeMessage",
    values: [
      Client.Any2EVMMessageStruct,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getOnRamp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOffRamp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "routeMessage",
    data: BytesLike
  ): Result;
}

export interface IRouter extends BaseContract {
  connect(runner?: ContractRunner | null): IRouter;
  waitForDeployment(): Promise<this>;

  interface: IRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getOnRamp: TypedContractMethod<
    [destChainSelector: BigNumberish],
    [string],
    "view"
  >;

  isOffRamp: TypedContractMethod<
    [sourceChainSelector: BigNumberish, offRamp: AddressLike],
    [boolean],
    "view"
  >;

  routeMessage: TypedContractMethod<
    [
      message: Client.Any2EVMMessageStruct,
      gasForCallExactCheck: BigNumberish,
      gasLimit: BigNumberish,
      receiver: AddressLike
    ],
    [
      [boolean, string, bigint] & {
        success: boolean;
        retBytes: string;
        gasUsed: bigint;
      }
    ],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getOnRamp"
  ): TypedContractMethod<[destChainSelector: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isOffRamp"
  ): TypedContractMethod<
    [sourceChainSelector: BigNumberish, offRamp: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "routeMessage"
  ): TypedContractMethod<
    [
      message: Client.Any2EVMMessageStruct,
      gasForCallExactCheck: BigNumberish,
      gasLimit: BigNumberish,
      receiver: AddressLike
    ],
    [
      [boolean, string, bigint] & {
        success: boolean;
        retBytes: string;
        gasUsed: bigint;
      }
    ],
    "nonpayable"
  >;

  filters: {};
}
